Source:
#include <iostream>
#include "Header.h"
using namespace std;

int main() {
	int op = 0, dat = 0;
	Stack a;
	while (op != 5) {
		cout << "\t\tStack Menu:\n";
		cout << "Press 1 Push\nPress 2 Pop\nPress 3 print\nPress 4 Check Top\n";
		cout << "Press 5 Exit\nEnter Command: ";
		cin >> op;
		switch (op) {
		case 1:
			cout << "Enter Data: "; cin >> dat;
			a.Push(dat);
			break;
		case 2:
			dat = a.pop();
			if (dat != NULL) {
				cout << "Data Deleted: " << dat << endl;
			}
			break;
		case 3:
			a.print();
			break;
		case 4:
			dat = a.top();
			if (dat != NULL) {
				cout << "Data at Top: " << dat << endl;
			}
			break;
		}
		system("pause");
		system("cls");
	}
	cout << endl;
	system("pause");
}
Header:
#pragma once
#include <iostream>
using namespace std;
//Data type: Single Linked List Stack
class Stack {
private:
	struct node {
		int dat;//contains data
		node* n = NULL;//contains adddress of next address 
		//is intialized with Null everytime a node type data type is made
	};
	node * head, * tail;//head points the begining of list and tail points end 
public:
	Stack(){
		head = NULL;
		tail = NULL;
	}
	bool empty() {
		if (head == NULL) {
			cout << "Stack is empty\n";
			return true;
		} 
		else {
			return false;
		}
	}
	void Push(int a) {//insert data at head
		node* p = new node;
		p->dat = a;
		if (head == NULL) {
			head = p;
			tail = p;
		}
		else {
			p->n = head;
			head = p;
		}
	}
	int pop() {///deleting data from head
		if (!empty()) {
			int a = head->dat;
			node* temp = head;
			head = head->n;
			if (head == NULL) {
				tail = NULL;
			}
			delete temp;
			return a;
		}
		else {
			return NULL;//returning null if list is empty
		}
	}
	int top() {
		if (!empty()) {
			return head->dat;
		}
		else {
			return NULL;
		}
	}
	void print() {
		node* p = head;//temporary variabe to traverse
		if(empty()){
			cout << "List is Empty\n";
		}
		else {
			cout << "Data: ";
			while (p != NULL) {
				cout << p->dat << " ";
				p = p->n;
			}
			cout << endl;
		}
	}
	~Stack() {
		int s = 1;
		while (s != NULL) {//deleting linked list
			s = pop();
		}
	}
};
